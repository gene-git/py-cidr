py_cidr.cidr_cache
==================

.. py:module:: py_cidr.cidr_cache

.. autoapi-nested-parse::

   Cached (network, value) pairs: value is string.
   network is any ipaddress network (ipv4 or ipv6 )
   lookup of a cidr returns its associated value.
   cidr matches cache.cidr if cidr is subnet of cidr.
   Cache is an ordered list by net.
    See Also:
       CidrMap which uses CidrCache and with a
       separate cache for ipv4 and ipv6
    Requires:
       ipaddress: for cidr/network manipulations
       lockmgr: for ensuring cache can be safely read/written





Module Contents
---------------

.. py:class:: CidrCache(ipt: str, cache_dir: str | None = None)

   Provides a cache that maps cidrs to values.

   Implemented as an ordered list of networks.
   All networks must be either ipv4 or ipv6
   as these are kept separate for performance.
   Each network has an assocated value.
   Each elem in ordered list is a typle of (cidr_net, value)

   Note that data list *must* be kept sorted and compressed.
   Compressing ensures that no elem can be subnet of any other element.
   Sorting allows search to work (efficiently).

   We use ipaddress network as the key rather than a string as
   this provides superior performance. This also minimizes
   conversion between network and string representations.

   Args:
       ipt (str):
       One of 'ipv4' or 'ipv6'

       cache_dir (str | None):
       Optional directory where cache files are saved.



   .. py:method:: add(net: py_cidr.cidr_types.IPvxNetwork, value: Any)

      Add (net, value) to cache.

      Note that if add a (cidr, value) pair exists in cache but is different,
      then this new added version will replace the existing one.

      Better name might be add_or_replace()

      Args:
          net (IPvxNetwork):
          ipaddress network to add to cache

          value (Any):
          The value associated with net to be cached as (net, value) pair.

          When present, all additions are made to private data
          instead of instance data and our own data is read only until
          all threads/processes finish.




   .. py:method:: add_cidr(cidr: str, value: Any)

      Same as add() but with input a cidr string instead of network.



   .. py:method:: combine_cache(new_cache: Self)

      Merge another CidrCache into self.

      Args:
          new_cache (CidrCache)
          Data must be installed .add() to ensure the cache data is
          network sorted.
          Data from new_cache is combined / merged into the instance data.

          NB the network types must match or will be ignored.



   .. py:method:: load_cache()

      Read cache from file



   .. py:method:: lookup(net: py_cidr.cidr_types.IPvxNetwork) -> Tuple[py_cidr.cidr_types.IPvxNetwork, Any] | Tuple[None, None]

      Lookup value associated with network.

      If network in cache then return the pair [cache_net, value].
      with net either equal to cache_net or a subnet of it.
      If not found then [None, None] is returned.

      Args:
          net (IPvxNetwork):
          The network to lookup.

      Returns:
          [IPvxNetwork, Any]:
          A list of with 2 items: [cache_network, value].
          where net is either equal to cache_network or a subnet of it.
          If net is not found then [None, None]




   .. py:method:: lookup_cidr(cidr: str) -> Any

      Look up the value associated with cidr string:
       - cache(cidr) -> value

      Args (str):
          Cidr to lookup

      Returns:
          str | None:
          Value associated with the cidr string or None if not found



   .. py:method:: lookup_elem(net: py_cidr.cidr_types.IPvxNetwork) -> py_cidr._cache_data.CidrCacheElem | None

      Lookup value associated with network.

      If network in cache then return the pair [cache_net, value].
      with net either equal to cache_net or a subnet of it.
      If not found then [None, None] is returned.

      Args:
          net (IPvxNetwork):
          The network to lookup.

      Returns:
          [IPvxNetwork, Any]:
          A list of with 2 items: [cache_network, value].
          where net is either equal to cache_network or a subnet of it.
          If net is not found then [None, None]




   .. py:method:: print()

      Print all the data.



   .. py:method:: sort()

      Sort the cached data in network order.



   .. py:method:: write()

      Write cache to file if cache_dir was set up.

      Use locking to ensure no file contention.



